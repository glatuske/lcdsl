/**
 * generated by Xtext 2.28.0
 */
package com.wamas.ide.launching.lcDsl.impl;

import com.wamas.ide.launching.lcDsl.AddFeature;
import com.wamas.ide.launching.lcDsl.AddPlugin;
import com.wamas.ide.launching.lcDsl.ApplicationExtPoint;
import com.wamas.ide.launching.lcDsl.ClearOption;
import com.wamas.ide.launching.lcDsl.ConfigIniTemplate;
import com.wamas.ide.launching.lcDsl.ContentProviderProduct;
import com.wamas.ide.launching.lcDsl.EnvironmentVariable;
import com.wamas.ide.launching.lcDsl.ExecutionEnvironment;
import com.wamas.ide.launching.lcDsl.Favorites;
import com.wamas.ide.launching.lcDsl.GroupMember;
import com.wamas.ide.launching.lcDsl.IgnorePlugin;
import com.wamas.ide.launching.lcDsl.JavaMainSearch;
import com.wamas.ide.launching.lcDsl.LaunchConfig;
import com.wamas.ide.launching.lcDsl.LaunchConfigType;
import com.wamas.ide.launching.lcDsl.LcDslPackage;
import com.wamas.ide.launching.lcDsl.MainProject;
import com.wamas.ide.launching.lcDsl.MainType;
import com.wamas.ide.launching.lcDsl.MemoryOption;
import com.wamas.ide.launching.lcDsl.ProductExtPoint;
import com.wamas.ide.launching.lcDsl.ProgramArgument;
import com.wamas.ide.launching.lcDsl.RapServletConfig;
import com.wamas.ide.launching.lcDsl.Redirect;
import com.wamas.ide.launching.lcDsl.TestConfig;
import com.wamas.ide.launching.lcDsl.TraceEnablement;
import com.wamas.ide.launching.lcDsl.VmArgument;
import com.wamas.ide.launching.lcDsl.WorkingDir;
import com.wamas.ide.launching.lcDsl.Workspace;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Launch Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isExplicit <em>Explicit</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isManual <em>Manual</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isForeground <em>Foreground</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isNoConsole <em>No Console</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isNoValidate <em>No Validate</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isSwInstallSupport <em>Sw Install Support</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isReplaceEnv <em>Replace Env</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isStopInMain <em>Stop In Main</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isKeepRunning <em>Keep Running</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isRunInUiThread <em>Run In Ui Thread</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isQualify <em>Qualify</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getQualifierId <em>Qualifier Id</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getType <em>Type</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getSuperConfig <em>Super Config</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getClears <em>Clears</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getWorkspace <em>Workspace</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getWorkingDir <em>Working Dir</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getMemory <em>Memory</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getMainProject <em>Main Project</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getMainType <em>Main Type</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getApplication <em>Application</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getProduct <em>Product</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getFavorites <em>Favorites</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getRedirect <em>Redirect</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getExecEnv <em>Exec Env</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getConfigIniTemplate <em>Config Ini Template</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getJavaMainSearch <em>Java Main Search</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getServletConfig <em>Servlet Config</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getContentProviderProduct <em>Content Provider Product</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getTest <em>Test</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getPlugins <em>Plugins</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getFeatures <em>Features</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getIgnore <em>Ignore</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getGroupMembers <em>Group Members</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getVmArgs <em>Vm Args</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getProgArgs <em>Prog Args</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getEnvVars <em>Env Vars</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getTraces <em>Traces</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LaunchConfigImpl extends MinimalEObjectImpl.Container implements LaunchConfig
{
  /**
   * The default value of the '{@link #isExplicit() <em>Explicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplicit()
   * @generated
   * @ordered
   */
  protected static final boolean EXPLICIT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExplicit() <em>Explicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplicit()
   * @generated
   * @ordered
   */
  protected boolean explicit = EXPLICIT_EDEFAULT;

  /**
   * The default value of the '{@link #isManual() <em>Manual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManual()
   * @generated
   * @ordered
   */
  protected static final boolean MANUAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isManual() <em>Manual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManual()
   * @generated
   * @ordered
   */
  protected boolean manual = MANUAL_EDEFAULT;

  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #isForeground() <em>Foreground</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isForeground()
   * @generated
   * @ordered
   */
  protected static final boolean FOREGROUND_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isForeground() <em>Foreground</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isForeground()
   * @generated
   * @ordered
   */
  protected boolean foreground = FOREGROUND_EDEFAULT;

  /**
   * The default value of the '{@link #isNoConsole() <em>No Console</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoConsole()
   * @generated
   * @ordered
   */
  protected static final boolean NO_CONSOLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNoConsole() <em>No Console</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoConsole()
   * @generated
   * @ordered
   */
  protected boolean noConsole = NO_CONSOLE_EDEFAULT;

  /**
   * The default value of the '{@link #isNoValidate() <em>No Validate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoValidate()
   * @generated
   * @ordered
   */
  protected static final boolean NO_VALIDATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNoValidate() <em>No Validate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoValidate()
   * @generated
   * @ordered
   */
  protected boolean noValidate = NO_VALIDATE_EDEFAULT;

  /**
   * The default value of the '{@link #isSwInstallSupport() <em>Sw Install Support</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSwInstallSupport()
   * @generated
   * @ordered
   */
  protected static final boolean SW_INSTALL_SUPPORT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSwInstallSupport() <em>Sw Install Support</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSwInstallSupport()
   * @generated
   * @ordered
   */
  protected boolean swInstallSupport = SW_INSTALL_SUPPORT_EDEFAULT;

  /**
   * The default value of the '{@link #isReplaceEnv() <em>Replace Env</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReplaceEnv()
   * @generated
   * @ordered
   */
  protected static final boolean REPLACE_ENV_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isReplaceEnv() <em>Replace Env</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReplaceEnv()
   * @generated
   * @ordered
   */
  protected boolean replaceEnv = REPLACE_ENV_EDEFAULT;

  /**
   * The default value of the '{@link #isStopInMain() <em>Stop In Main</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStopInMain()
   * @generated
   * @ordered
   */
  protected static final boolean STOP_IN_MAIN_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStopInMain() <em>Stop In Main</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStopInMain()
   * @generated
   * @ordered
   */
  protected boolean stopInMain = STOP_IN_MAIN_EDEFAULT;

  /**
   * The default value of the '{@link #isKeepRunning() <em>Keep Running</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isKeepRunning()
   * @generated
   * @ordered
   */
  protected static final boolean KEEP_RUNNING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isKeepRunning() <em>Keep Running</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isKeepRunning()
   * @generated
   * @ordered
   */
  protected boolean keepRunning = KEEP_RUNNING_EDEFAULT;

  /**
   * The default value of the '{@link #isRunInUiThread() <em>Run In Ui Thread</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRunInUiThread()
   * @generated
   * @ordered
   */
  protected static final boolean RUN_IN_UI_THREAD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRunInUiThread() <em>Run In Ui Thread</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRunInUiThread()
   * @generated
   * @ordered
   */
  protected boolean runInUiThread = RUN_IN_UI_THREAD_EDEFAULT;

  /**
   * The default value of the '{@link #isQualify() <em>Qualify</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isQualify()
   * @generated
   * @ordered
   */
  protected static final boolean QUALIFY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isQualify() <em>Qualify</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isQualify()
   * @generated
   * @ordered
   */
  protected boolean qualify = QUALIFY_EDEFAULT;

  /**
   * The default value of the '{@link #getQualifierId() <em>Qualifier Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualifierId()
   * @generated
   * @ordered
   */
  protected static final String QUALIFIER_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getQualifierId() <em>Qualifier Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualifierId()
   * @generated
   * @ordered
   */
  protected String qualifierId = QUALIFIER_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final LaunchConfigType TYPE_EDEFAULT = LaunchConfigType.JAVA;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected LaunchConfigType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSuperConfig() <em>Super Config</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperConfig()
   * @generated
   * @ordered
   */
  protected LaunchConfig superConfig;

  /**
   * The cached value of the '{@link #getClears() <em>Clears</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClears()
   * @generated
   * @ordered
   */
  protected ClearOption clears;

  /**
   * The cached value of the '{@link #getWorkspace() <em>Workspace</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkspace()
   * @generated
   * @ordered
   */
  protected Workspace workspace;

  /**
   * The cached value of the '{@link #getWorkingDir() <em>Working Dir</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkingDir()
   * @generated
   * @ordered
   */
  protected WorkingDir workingDir;

  /**
   * The cached value of the '{@link #getMemory() <em>Memory</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemory()
   * @generated
   * @ordered
   */
  protected MemoryOption memory;

  /**
   * The cached value of the '{@link #getMainProject() <em>Main Project</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainProject()
   * @generated
   * @ordered
   */
  protected MainProject mainProject;

  /**
   * The cached value of the '{@link #getMainType() <em>Main Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainType()
   * @generated
   * @ordered
   */
  protected MainType mainType;

  /**
   * The cached value of the '{@link #getApplication() <em>Application</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApplication()
   * @generated
   * @ordered
   */
  protected ApplicationExtPoint application;

  /**
   * The cached value of the '{@link #getProduct() <em>Product</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProduct()
   * @generated
   * @ordered
   */
  protected ProductExtPoint product;

  /**
   * The cached value of the '{@link #getFavorites() <em>Favorites</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFavorites()
   * @generated
   * @ordered
   */
  protected Favorites favorites;

  /**
   * The cached value of the '{@link #getRedirect() <em>Redirect</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRedirect()
   * @generated
   * @ordered
   */
  protected Redirect redirect;

  /**
   * The cached value of the '{@link #getExecEnv() <em>Exec Env</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecEnv()
   * @generated
   * @ordered
   */
  protected ExecutionEnvironment execEnv;

  /**
   * The cached value of the '{@link #getConfigIniTemplate() <em>Config Ini Template</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigIniTemplate()
   * @generated
   * @ordered
   */
  protected ConfigIniTemplate configIniTemplate;

  /**
   * The cached value of the '{@link #getJavaMainSearch() <em>Java Main Search</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaMainSearch()
   * @generated
   * @ordered
   */
  protected JavaMainSearch javaMainSearch;

  /**
   * The cached value of the '{@link #getServletConfig() <em>Servlet Config</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServletConfig()
   * @generated
   * @ordered
   */
  protected RapServletConfig servletConfig;

  /**
   * The cached value of the '{@link #getContentProviderProduct() <em>Content Provider Product</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContentProviderProduct()
   * @generated
   * @ordered
   */
  protected ContentProviderProduct contentProviderProduct;

  /**
   * The cached value of the '{@link #getTest() <em>Test</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected TestConfig test;

  /**
   * The cached value of the '{@link #getPlugins() <em>Plugins</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlugins()
   * @generated
   * @ordered
   */
  protected EList<AddPlugin> plugins;

  /**
   * The cached value of the '{@link #getFeatures() <em>Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatures()
   * @generated
   * @ordered
   */
  protected EList<AddFeature> features;

  /**
   * The cached value of the '{@link #getIgnore() <em>Ignore</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore()
   * @generated
   * @ordered
   */
  protected EList<IgnorePlugin> ignore;

  /**
   * The cached value of the '{@link #getGroupMembers() <em>Group Members</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupMembers()
   * @generated
   * @ordered
   */
  protected EList<GroupMember> groupMembers;

  /**
   * The cached value of the '{@link #getVmArgs() <em>Vm Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmArgs()
   * @generated
   * @ordered
   */
  protected EList<VmArgument> vmArgs;

  /**
   * The cached value of the '{@link #getProgArgs() <em>Prog Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgArgs()
   * @generated
   * @ordered
   */
  protected EList<ProgramArgument> progArgs;

  /**
   * The cached value of the '{@link #getEnvVars() <em>Env Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvVars()
   * @generated
   * @ordered
   */
  protected EList<EnvironmentVariable> envVars;

  /**
   * The cached value of the '{@link #getTraces() <em>Traces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTraces()
   * @generated
   * @ordered
   */
  protected EList<TraceEnablement> traces;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LaunchConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LcDslPackage.Literals.LAUNCH_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExplicit()
  {
    return explicit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExplicit(boolean newExplicit)
  {
    boolean oldExplicit = explicit;
    explicit = newExplicit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__EXPLICIT, oldExplicit, explicit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isManual()
  {
    return manual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setManual(boolean newManual)
  {
    boolean oldManual = manual;
    manual = newManual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MANUAL, oldManual, manual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isForeground()
  {
    return foreground;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForeground(boolean newForeground)
  {
    boolean oldForeground = foreground;
    foreground = newForeground;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__FOREGROUND, oldForeground, foreground));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNoConsole()
  {
    return noConsole;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNoConsole(boolean newNoConsole)
  {
    boolean oldNoConsole = noConsole;
    noConsole = newNoConsole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__NO_CONSOLE, oldNoConsole, noConsole));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNoValidate()
  {
    return noValidate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNoValidate(boolean newNoValidate)
  {
    boolean oldNoValidate = noValidate;
    noValidate = newNoValidate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__NO_VALIDATE, oldNoValidate, noValidate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSwInstallSupport()
  {
    return swInstallSupport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSwInstallSupport(boolean newSwInstallSupport)
  {
    boolean oldSwInstallSupport = swInstallSupport;
    swInstallSupport = newSwInstallSupport;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__SW_INSTALL_SUPPORT, oldSwInstallSupport, swInstallSupport));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isReplaceEnv()
  {
    return replaceEnv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReplaceEnv(boolean newReplaceEnv)
  {
    boolean oldReplaceEnv = replaceEnv;
    replaceEnv = newReplaceEnv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__REPLACE_ENV, oldReplaceEnv, replaceEnv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStopInMain()
  {
    return stopInMain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStopInMain(boolean newStopInMain)
  {
    boolean oldStopInMain = stopInMain;
    stopInMain = newStopInMain;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__STOP_IN_MAIN, oldStopInMain, stopInMain));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isKeepRunning()
  {
    return keepRunning;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeepRunning(boolean newKeepRunning)
  {
    boolean oldKeepRunning = keepRunning;
    keepRunning = newKeepRunning;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__KEEP_RUNNING, oldKeepRunning, keepRunning));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRunInUiThread()
  {
    return runInUiThread;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRunInUiThread(boolean newRunInUiThread)
  {
    boolean oldRunInUiThread = runInUiThread;
    runInUiThread = newRunInUiThread;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__RUN_IN_UI_THREAD, oldRunInUiThread, runInUiThread));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isQualify()
  {
    return qualify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQualify(boolean newQualify)
  {
    boolean oldQualify = qualify;
    qualify = newQualify;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__QUALIFY, oldQualify, qualify));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getQualifierId()
  {
    return qualifierId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQualifierId(String newQualifierId)
  {
    String oldQualifierId = qualifierId;
    qualifierId = newQualifierId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__QUALIFIER_ID, oldQualifierId, qualifierId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LaunchConfigType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(LaunchConfigType newType)
  {
    LaunchConfigType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LaunchConfig getSuperConfig()
  {
    if (superConfig != null && superConfig.eIsProxy())
    {
      InternalEObject oldSuperConfig = (InternalEObject)superConfig;
      superConfig = (LaunchConfig)eResolveProxy(oldSuperConfig);
      if (superConfig != oldSuperConfig)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG, oldSuperConfig, superConfig));
      }
    }
    return superConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LaunchConfig basicGetSuperConfig()
  {
    return superConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuperConfig(LaunchConfig newSuperConfig)
  {
    LaunchConfig oldSuperConfig = superConfig;
    superConfig = newSuperConfig;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG, oldSuperConfig, superConfig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClearOption getClears()
  {
    return clears;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClears(ClearOption newClears, NotificationChain msgs)
  {
    ClearOption oldClears = clears;
    clears = newClears;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CLEARS, oldClears, newClears);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClears(ClearOption newClears)
  {
    if (newClears != clears)
    {
      NotificationChain msgs = null;
      if (clears != null)
        msgs = ((InternalEObject)clears).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CLEARS, null, msgs);
      if (newClears != null)
        msgs = ((InternalEObject)newClears).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CLEARS, null, msgs);
      msgs = basicSetClears(newClears, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CLEARS, newClears, newClears));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workspace getWorkspace()
  {
    return workspace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWorkspace(Workspace newWorkspace, NotificationChain msgs)
  {
    Workspace oldWorkspace = workspace;
    workspace = newWorkspace;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKSPACE, oldWorkspace, newWorkspace);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorkspace(Workspace newWorkspace)
  {
    if (newWorkspace != workspace)
    {
      NotificationChain msgs = null;
      if (workspace != null)
        msgs = ((InternalEObject)workspace).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKSPACE, null, msgs);
      if (newWorkspace != null)
        msgs = ((InternalEObject)newWorkspace).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKSPACE, null, msgs);
      msgs = basicSetWorkspace(newWorkspace, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKSPACE, newWorkspace, newWorkspace));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkingDir getWorkingDir()
  {
    return workingDir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWorkingDir(WorkingDir newWorkingDir, NotificationChain msgs)
  {
    WorkingDir oldWorkingDir = workingDir;
    workingDir = newWorkingDir;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, oldWorkingDir, newWorkingDir);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorkingDir(WorkingDir newWorkingDir)
  {
    if (newWorkingDir != workingDir)
    {
      NotificationChain msgs = null;
      if (workingDir != null)
        msgs = ((InternalEObject)workingDir).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, null, msgs);
      if (newWorkingDir != null)
        msgs = ((InternalEObject)newWorkingDir).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, null, msgs);
      msgs = basicSetWorkingDir(newWorkingDir, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, newWorkingDir, newWorkingDir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MemoryOption getMemory()
  {
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMemory(MemoryOption newMemory, NotificationChain msgs)
  {
    MemoryOption oldMemory = memory;
    memory = newMemory;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MEMORY, oldMemory, newMemory);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMemory(MemoryOption newMemory)
  {
    if (newMemory != memory)
    {
      NotificationChain msgs = null;
      if (memory != null)
        msgs = ((InternalEObject)memory).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MEMORY, null, msgs);
      if (newMemory != null)
        msgs = ((InternalEObject)newMemory).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MEMORY, null, msgs);
      msgs = basicSetMemory(newMemory, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MEMORY, newMemory, newMemory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainProject getMainProject()
  {
    return mainProject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainProject(MainProject newMainProject, NotificationChain msgs)
  {
    MainProject oldMainProject = mainProject;
    mainProject = newMainProject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT, oldMainProject, newMainProject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainProject(MainProject newMainProject)
  {
    if (newMainProject != mainProject)
    {
      NotificationChain msgs = null;
      if (mainProject != null)
        msgs = ((InternalEObject)mainProject).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT, null, msgs);
      if (newMainProject != null)
        msgs = ((InternalEObject)newMainProject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT, null, msgs);
      msgs = basicSetMainProject(newMainProject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT, newMainProject, newMainProject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainType getMainType()
  {
    return mainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainType(MainType newMainType, NotificationChain msgs)
  {
    MainType oldMainType = mainType;
    mainType = newMainType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE, oldMainType, newMainType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainType(MainType newMainType)
  {
    if (newMainType != mainType)
    {
      NotificationChain msgs = null;
      if (mainType != null)
        msgs = ((InternalEObject)mainType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE, null, msgs);
      if (newMainType != null)
        msgs = ((InternalEObject)newMainType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE, null, msgs);
      msgs = basicSetMainType(newMainType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE, newMainType, newMainType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplicationExtPoint getApplication()
  {
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetApplication(ApplicationExtPoint newApplication, NotificationChain msgs)
  {
    ApplicationExtPoint oldApplication = application;
    application = newApplication;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__APPLICATION, oldApplication, newApplication);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setApplication(ApplicationExtPoint newApplication)
  {
    if (newApplication != application)
    {
      NotificationChain msgs = null;
      if (application != null)
        msgs = ((InternalEObject)application).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__APPLICATION, null, msgs);
      if (newApplication != null)
        msgs = ((InternalEObject)newApplication).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__APPLICATION, null, msgs);
      msgs = basicSetApplication(newApplication, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__APPLICATION, newApplication, newApplication));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProductExtPoint getProduct()
  {
    return product;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProduct(ProductExtPoint newProduct, NotificationChain msgs)
  {
    ProductExtPoint oldProduct = product;
    product = newProduct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__PRODUCT, oldProduct, newProduct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProduct(ProductExtPoint newProduct)
  {
    if (newProduct != product)
    {
      NotificationChain msgs = null;
      if (product != null)
        msgs = ((InternalEObject)product).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__PRODUCT, null, msgs);
      if (newProduct != null)
        msgs = ((InternalEObject)newProduct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__PRODUCT, null, msgs);
      msgs = basicSetProduct(newProduct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__PRODUCT, newProduct, newProduct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Favorites getFavorites()
  {
    return favorites;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFavorites(Favorites newFavorites, NotificationChain msgs)
  {
    Favorites oldFavorites = favorites;
    favorites = newFavorites;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__FAVORITES, oldFavorites, newFavorites);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFavorites(Favorites newFavorites)
  {
    if (newFavorites != favorites)
    {
      NotificationChain msgs = null;
      if (favorites != null)
        msgs = ((InternalEObject)favorites).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__FAVORITES, null, msgs);
      if (newFavorites != null)
        msgs = ((InternalEObject)newFavorites).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__FAVORITES, null, msgs);
      msgs = basicSetFavorites(newFavorites, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__FAVORITES, newFavorites, newFavorites));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Redirect getRedirect()
  {
    return redirect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRedirect(Redirect newRedirect, NotificationChain msgs)
  {
    Redirect oldRedirect = redirect;
    redirect = newRedirect;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__REDIRECT, oldRedirect, newRedirect);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRedirect(Redirect newRedirect)
  {
    if (newRedirect != redirect)
    {
      NotificationChain msgs = null;
      if (redirect != null)
        msgs = ((InternalEObject)redirect).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__REDIRECT, null, msgs);
      if (newRedirect != null)
        msgs = ((InternalEObject)newRedirect).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__REDIRECT, null, msgs);
      msgs = basicSetRedirect(newRedirect, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__REDIRECT, newRedirect, newRedirect));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecutionEnvironment getExecEnv()
  {
    return execEnv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExecEnv(ExecutionEnvironment newExecEnv, NotificationChain msgs)
  {
    ExecutionEnvironment oldExecEnv = execEnv;
    execEnv = newExecEnv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__EXEC_ENV, oldExecEnv, newExecEnv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExecEnv(ExecutionEnvironment newExecEnv)
  {
    if (newExecEnv != execEnv)
    {
      NotificationChain msgs = null;
      if (execEnv != null)
        msgs = ((InternalEObject)execEnv).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__EXEC_ENV, null, msgs);
      if (newExecEnv != null)
        msgs = ((InternalEObject)newExecEnv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__EXEC_ENV, null, msgs);
      msgs = basicSetExecEnv(newExecEnv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__EXEC_ENV, newExecEnv, newExecEnv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigIniTemplate getConfigIniTemplate()
  {
    return configIniTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfigIniTemplate(ConfigIniTemplate newConfigIniTemplate, NotificationChain msgs)
  {
    ConfigIniTemplate oldConfigIniTemplate = configIniTemplate;
    configIniTemplate = newConfigIniTemplate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE, oldConfigIniTemplate, newConfigIniTemplate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfigIniTemplate(ConfigIniTemplate newConfigIniTemplate)
  {
    if (newConfigIniTemplate != configIniTemplate)
    {
      NotificationChain msgs = null;
      if (configIniTemplate != null)
        msgs = ((InternalEObject)configIniTemplate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE, null, msgs);
      if (newConfigIniTemplate != null)
        msgs = ((InternalEObject)newConfigIniTemplate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE, null, msgs);
      msgs = basicSetConfigIniTemplate(newConfigIniTemplate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE, newConfigIniTemplate, newConfigIniTemplate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JavaMainSearch getJavaMainSearch()
  {
    return javaMainSearch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJavaMainSearch(JavaMainSearch newJavaMainSearch, NotificationChain msgs)
  {
    JavaMainSearch oldJavaMainSearch = javaMainSearch;
    javaMainSearch = newJavaMainSearch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH, oldJavaMainSearch, newJavaMainSearch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJavaMainSearch(JavaMainSearch newJavaMainSearch)
  {
    if (newJavaMainSearch != javaMainSearch)
    {
      NotificationChain msgs = null;
      if (javaMainSearch != null)
        msgs = ((InternalEObject)javaMainSearch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH, null, msgs);
      if (newJavaMainSearch != null)
        msgs = ((InternalEObject)newJavaMainSearch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH, null, msgs);
      msgs = basicSetJavaMainSearch(newJavaMainSearch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH, newJavaMainSearch, newJavaMainSearch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RapServletConfig getServletConfig()
  {
    return servletConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetServletConfig(RapServletConfig newServletConfig, NotificationChain msgs)
  {
    RapServletConfig oldServletConfig = servletConfig;
    servletConfig = newServletConfig;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG, oldServletConfig, newServletConfig);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setServletConfig(RapServletConfig newServletConfig)
  {
    if (newServletConfig != servletConfig)
    {
      NotificationChain msgs = null;
      if (servletConfig != null)
        msgs = ((InternalEObject)servletConfig).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG, null, msgs);
      if (newServletConfig != null)
        msgs = ((InternalEObject)newServletConfig).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG, null, msgs);
      msgs = basicSetServletConfig(newServletConfig, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG, newServletConfig, newServletConfig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContentProviderProduct getContentProviderProduct()
  {
    return contentProviderProduct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContentProviderProduct(ContentProviderProduct newContentProviderProduct, NotificationChain msgs)
  {
    ContentProviderProduct oldContentProviderProduct = contentProviderProduct;
    contentProviderProduct = newContentProviderProduct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT, oldContentProviderProduct, newContentProviderProduct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContentProviderProduct(ContentProviderProduct newContentProviderProduct)
  {
    if (newContentProviderProduct != contentProviderProduct)
    {
      NotificationChain msgs = null;
      if (contentProviderProduct != null)
        msgs = ((InternalEObject)contentProviderProduct).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT, null, msgs);
      if (newContentProviderProduct != null)
        msgs = ((InternalEObject)newContentProviderProduct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT, null, msgs);
      msgs = basicSetContentProviderProduct(newContentProviderProduct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT, newContentProviderProduct, newContentProviderProduct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestConfig getTest()
  {
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTest(TestConfig newTest, NotificationChain msgs)
  {
    TestConfig oldTest = test;
    test = newTest;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__TEST, oldTest, newTest);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTest(TestConfig newTest)
  {
    if (newTest != test)
    {
      NotificationChain msgs = null;
      if (test != null)
        msgs = ((InternalEObject)test).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__TEST, null, msgs);
      if (newTest != null)
        msgs = ((InternalEObject)newTest).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__TEST, null, msgs);
      msgs = basicSetTest(newTest, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__TEST, newTest, newTest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AddPlugin> getPlugins()
  {
    if (plugins == null)
    {
      plugins = new EObjectContainmentEList<AddPlugin>(AddPlugin.class, this, LcDslPackage.LAUNCH_CONFIG__PLUGINS);
    }
    return plugins;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AddFeature> getFeatures()
  {
    if (features == null)
    {
      features = new EObjectContainmentEList<AddFeature>(AddFeature.class, this, LcDslPackage.LAUNCH_CONFIG__FEATURES);
    }
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IgnorePlugin> getIgnore()
  {
    if (ignore == null)
    {
      ignore = new EObjectContainmentEList<IgnorePlugin>(IgnorePlugin.class, this, LcDslPackage.LAUNCH_CONFIG__IGNORE);
    }
    return ignore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GroupMember> getGroupMembers()
  {
    if (groupMembers == null)
    {
      groupMembers = new EObjectContainmentEList<GroupMember>(GroupMember.class, this, LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS);
    }
    return groupMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VmArgument> getVmArgs()
  {
    if (vmArgs == null)
    {
      vmArgs = new EObjectContainmentEList<VmArgument>(VmArgument.class, this, LcDslPackage.LAUNCH_CONFIG__VM_ARGS);
    }
    return vmArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ProgramArgument> getProgArgs()
  {
    if (progArgs == null)
    {
      progArgs = new EObjectContainmentEList<ProgramArgument>(ProgramArgument.class, this, LcDslPackage.LAUNCH_CONFIG__PROG_ARGS);
    }
    return progArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EnvironmentVariable> getEnvVars()
  {
    if (envVars == null)
    {
      envVars = new EObjectContainmentEList<EnvironmentVariable>(EnvironmentVariable.class, this, LcDslPackage.LAUNCH_CONFIG__ENV_VARS);
    }
    return envVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TraceEnablement> getTraces()
  {
    if (traces == null)
    {
      traces = new EObjectContainmentEList<TraceEnablement>(TraceEnablement.class, this, LcDslPackage.LAUNCH_CONFIG__TRACES);
    }
    return traces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        return basicSetClears(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        return basicSetWorkspace(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        return basicSetWorkingDir(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        return basicSetMemory(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT:
        return basicSetMainProject(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE:
        return basicSetMainType(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        return basicSetApplication(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        return basicSetProduct(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__FAVORITES:
        return basicSetFavorites(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__REDIRECT:
        return basicSetRedirect(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__EXEC_ENV:
        return basicSetExecEnv(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE:
        return basicSetConfigIniTemplate(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH:
        return basicSetJavaMainSearch(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG:
        return basicSetServletConfig(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT:
        return basicSetContentProviderProduct(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__TEST:
        return basicSetTest(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        return ((InternalEList<?>)getPlugins()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__FEATURES:
        return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        return ((InternalEList<?>)getIgnore()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        return ((InternalEList<?>)getGroupMembers()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        return ((InternalEList<?>)getVmArgs()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        return ((InternalEList<?>)getProgArgs()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__ENV_VARS:
        return ((InternalEList<?>)getEnvVars()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__TRACES:
        return ((InternalEList<?>)getTraces()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        return isExplicit();
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        return isManual();
      case LcDslPackage.LAUNCH_CONFIG__ABSTRACT:
        return isAbstract();
      case LcDslPackage.LAUNCH_CONFIG__FOREGROUND:
        return isForeground();
      case LcDslPackage.LAUNCH_CONFIG__NO_CONSOLE:
        return isNoConsole();
      case LcDslPackage.LAUNCH_CONFIG__NO_VALIDATE:
        return isNoValidate();
      case LcDslPackage.LAUNCH_CONFIG__SW_INSTALL_SUPPORT:
        return isSwInstallSupport();
      case LcDslPackage.LAUNCH_CONFIG__REPLACE_ENV:
        return isReplaceEnv();
      case LcDslPackage.LAUNCH_CONFIG__STOP_IN_MAIN:
        return isStopInMain();
      case LcDslPackage.LAUNCH_CONFIG__KEEP_RUNNING:
        return isKeepRunning();
      case LcDslPackage.LAUNCH_CONFIG__RUN_IN_UI_THREAD:
        return isRunInUiThread();
      case LcDslPackage.LAUNCH_CONFIG__QUALIFY:
        return isQualify();
      case LcDslPackage.LAUNCH_CONFIG__QUALIFIER_ID:
        return getQualifierId();
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        return getType();
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        return getName();
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        if (resolve) return getSuperConfig();
        return basicGetSuperConfig();
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        return getClears();
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        return getWorkspace();
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        return getWorkingDir();
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        return getMemory();
      case LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT:
        return getMainProject();
      case LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE:
        return getMainType();
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        return getApplication();
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        return getProduct();
      case LcDslPackage.LAUNCH_CONFIG__FAVORITES:
        return getFavorites();
      case LcDslPackage.LAUNCH_CONFIG__REDIRECT:
        return getRedirect();
      case LcDslPackage.LAUNCH_CONFIG__EXEC_ENV:
        return getExecEnv();
      case LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE:
        return getConfigIniTemplate();
      case LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH:
        return getJavaMainSearch();
      case LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG:
        return getServletConfig();
      case LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT:
        return getContentProviderProduct();
      case LcDslPackage.LAUNCH_CONFIG__TEST:
        return getTest();
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        return getPlugins();
      case LcDslPackage.LAUNCH_CONFIG__FEATURES:
        return getFeatures();
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        return getIgnore();
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        return getGroupMembers();
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        return getVmArgs();
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        return getProgArgs();
      case LcDslPackage.LAUNCH_CONFIG__ENV_VARS:
        return getEnvVars();
      case LcDslPackage.LAUNCH_CONFIG__TRACES:
        return getTraces();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        setExplicit((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        setManual((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__FOREGROUND:
        setForeground((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NO_CONSOLE:
        setNoConsole((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NO_VALIDATE:
        setNoValidate((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SW_INSTALL_SUPPORT:
        setSwInstallSupport((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__REPLACE_ENV:
        setReplaceEnv((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__STOP_IN_MAIN:
        setStopInMain((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__KEEP_RUNNING:
        setKeepRunning((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__RUN_IN_UI_THREAD:
        setRunInUiThread((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__QUALIFY:
        setQualify((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__QUALIFIER_ID:
        setQualifierId((String)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        setType((LaunchConfigType)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        setName((String)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        setSuperConfig((LaunchConfig)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        setClears((ClearOption)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        setWorkspace((Workspace)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        setWorkingDir((WorkingDir)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        setMemory((MemoryOption)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT:
        setMainProject((MainProject)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE:
        setMainType((MainType)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        setApplication((ApplicationExtPoint)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        setProduct((ProductExtPoint)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__FAVORITES:
        setFavorites((Favorites)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__REDIRECT:
        setRedirect((Redirect)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__EXEC_ENV:
        setExecEnv((ExecutionEnvironment)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE:
        setConfigIniTemplate((ConfigIniTemplate)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH:
        setJavaMainSearch((JavaMainSearch)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG:
        setServletConfig((RapServletConfig)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT:
        setContentProviderProduct((ContentProviderProduct)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TEST:
        setTest((TestConfig)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        getPlugins().clear();
        getPlugins().addAll((Collection<? extends AddPlugin>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__FEATURES:
        getFeatures().clear();
        getFeatures().addAll((Collection<? extends AddFeature>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        getIgnore().clear();
        getIgnore().addAll((Collection<? extends IgnorePlugin>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        getGroupMembers().clear();
        getGroupMembers().addAll((Collection<? extends GroupMember>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        getVmArgs().clear();
        getVmArgs().addAll((Collection<? extends VmArgument>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        getProgArgs().clear();
        getProgArgs().addAll((Collection<? extends ProgramArgument>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__ENV_VARS:
        getEnvVars().clear();
        getEnvVars().addAll((Collection<? extends EnvironmentVariable>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TRACES:
        getTraces().clear();
        getTraces().addAll((Collection<? extends TraceEnablement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        setExplicit(EXPLICIT_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        setManual(MANUAL_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__FOREGROUND:
        setForeground(FOREGROUND_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NO_CONSOLE:
        setNoConsole(NO_CONSOLE_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NO_VALIDATE:
        setNoValidate(NO_VALIDATE_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SW_INSTALL_SUPPORT:
        setSwInstallSupport(SW_INSTALL_SUPPORT_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__REPLACE_ENV:
        setReplaceEnv(REPLACE_ENV_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__STOP_IN_MAIN:
        setStopInMain(STOP_IN_MAIN_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__KEEP_RUNNING:
        setKeepRunning(KEEP_RUNNING_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__RUN_IN_UI_THREAD:
        setRunInUiThread(RUN_IN_UI_THREAD_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__QUALIFY:
        setQualify(QUALIFY_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__QUALIFIER_ID:
        setQualifierId(QUALIFIER_ID_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        setSuperConfig((LaunchConfig)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        setClears((ClearOption)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        setWorkspace((Workspace)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        setWorkingDir((WorkingDir)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        setMemory((MemoryOption)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT:
        setMainProject((MainProject)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE:
        setMainType((MainType)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        setApplication((ApplicationExtPoint)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        setProduct((ProductExtPoint)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__FAVORITES:
        setFavorites((Favorites)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__REDIRECT:
        setRedirect((Redirect)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__EXEC_ENV:
        setExecEnv((ExecutionEnvironment)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE:
        setConfigIniTemplate((ConfigIniTemplate)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH:
        setJavaMainSearch((JavaMainSearch)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG:
        setServletConfig((RapServletConfig)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT:
        setContentProviderProduct((ContentProviderProduct)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TEST:
        setTest((TestConfig)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        getPlugins().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__FEATURES:
        getFeatures().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        getIgnore().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        getGroupMembers().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        getVmArgs().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        getProgArgs().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__ENV_VARS:
        getEnvVars().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__TRACES:
        getTraces().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        return explicit != EXPLICIT_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        return manual != MANUAL_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__FOREGROUND:
        return foreground != FOREGROUND_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__NO_CONSOLE:
        return noConsole != NO_CONSOLE_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__NO_VALIDATE:
        return noValidate != NO_VALIDATE_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__SW_INSTALL_SUPPORT:
        return swInstallSupport != SW_INSTALL_SUPPORT_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__REPLACE_ENV:
        return replaceEnv != REPLACE_ENV_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__STOP_IN_MAIN:
        return stopInMain != STOP_IN_MAIN_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__KEEP_RUNNING:
        return keepRunning != KEEP_RUNNING_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__RUN_IN_UI_THREAD:
        return runInUiThread != RUN_IN_UI_THREAD_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__QUALIFY:
        return qualify != QUALIFY_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__QUALIFIER_ID:
        return QUALIFIER_ID_EDEFAULT == null ? qualifierId != null : !QUALIFIER_ID_EDEFAULT.equals(qualifierId);
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        return type != TYPE_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        return superConfig != null;
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        return clears != null;
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        return workspace != null;
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        return workingDir != null;
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        return memory != null;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_PROJECT:
        return mainProject != null;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_TYPE:
        return mainType != null;
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        return application != null;
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        return product != null;
      case LcDslPackage.LAUNCH_CONFIG__FAVORITES:
        return favorites != null;
      case LcDslPackage.LAUNCH_CONFIG__REDIRECT:
        return redirect != null;
      case LcDslPackage.LAUNCH_CONFIG__EXEC_ENV:
        return execEnv != null;
      case LcDslPackage.LAUNCH_CONFIG__CONFIG_INI_TEMPLATE:
        return configIniTemplate != null;
      case LcDslPackage.LAUNCH_CONFIG__JAVA_MAIN_SEARCH:
        return javaMainSearch != null;
      case LcDslPackage.LAUNCH_CONFIG__SERVLET_CONFIG:
        return servletConfig != null;
      case LcDslPackage.LAUNCH_CONFIG__CONTENT_PROVIDER_PRODUCT:
        return contentProviderProduct != null;
      case LcDslPackage.LAUNCH_CONFIG__TEST:
        return test != null;
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        return plugins != null && !plugins.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__FEATURES:
        return features != null && !features.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        return ignore != null && !ignore.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        return groupMembers != null && !groupMembers.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        return vmArgs != null && !vmArgs.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        return progArgs != null && !progArgs.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__ENV_VARS:
        return envVars != null && !envVars.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__TRACES:
        return traces != null && !traces.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (explicit: ");
    result.append(explicit);
    result.append(", manual: ");
    result.append(manual);
    result.append(", abstract: ");
    result.append(abstract_);
    result.append(", foreground: ");
    result.append(foreground);
    result.append(", noConsole: ");
    result.append(noConsole);
    result.append(", noValidate: ");
    result.append(noValidate);
    result.append(", swInstallSupport: ");
    result.append(swInstallSupport);
    result.append(", replaceEnv: ");
    result.append(replaceEnv);
    result.append(", stopInMain: ");
    result.append(stopInMain);
    result.append(", keepRunning: ");
    result.append(keepRunning);
    result.append(", runInUiThread: ");
    result.append(runInUiThread);
    result.append(", qualify: ");
    result.append(qualify);
    result.append(", qualifierId: ");
    result.append(qualifierId);
    result.append(", type: ");
    result.append(type);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //LaunchConfigImpl

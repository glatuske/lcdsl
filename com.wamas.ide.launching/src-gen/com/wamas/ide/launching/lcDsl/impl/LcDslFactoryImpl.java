/**
 * generated by Xtext 2.28.0
 */
package com.wamas.ide.launching.lcDsl.impl;

import com.wamas.ide.launching.lcDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LcDslFactoryImpl extends EFactoryImpl implements LcDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LcDslFactory init()
  {
    try
    {
      LcDslFactory theLcDslFactory = (LcDslFactory)EPackage.Registry.INSTANCE.getEFactory(LcDslPackage.eNS_URI);
      if (theLcDslFactory != null)
      {
        return theLcDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LcDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LcDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LcDslPackage.LC_MODEL: return createLCModel();
      case LcDslPackage.LAUNCH_CONFIG: return createLaunchConfig();
      case LcDslPackage.WORKSPACE: return createWorkspace();
      case LcDslPackage.WORKING_DIR: return createWorkingDir();
      case LcDslPackage.MAIN_PROJECT: return createMainProject();
      case LcDslPackage.MAIN_TYPE: return createMainType();
      case LcDslPackage.ADD_PLUGIN: return createAddPlugin();
      case LcDslPackage.ADD_FEATURE: return createAddFeature();
      case LcDslPackage.CONTENT_PROVIDER_PRODUCT: return createContentProviderProduct();
      case LcDslPackage.IGNORE_PLUGIN: return createIgnorePlugin();
      case LcDslPackage.VM_ARGUMENT: return createVmArgument();
      case LcDslPackage.PROGRAM_ARGUMENT: return createProgramArgument();
      case LcDslPackage.ENVIRONMENT_VARIABLE: return createEnvironmentVariable();
      case LcDslPackage.APPLICATION_EXT_POINT: return createApplicationExtPoint();
      case LcDslPackage.PRODUCT_EXT_POINT: return createProductExtPoint();
      case LcDslPackage.FAVORITES: return createFavorites();
      case LcDslPackage.REDIRECT: return createRedirect();
      case LcDslPackage.EXECUTION_ENVIRONMENT: return createExecutionEnvironment();
      case LcDslPackage.CONFIG_INI_TEMPLATE: return createConfigIniTemplate();
      case LcDslPackage.TRACE_ENABLEMENT: return createTraceEnablement();
      case LcDslPackage.JAVA_MAIN_SEARCH: return createJavaMainSearch();
      case LcDslPackage.RAP_SERVLET_CONFIG: return createRapServletConfig();
      case LcDslPackage.PATH: return createPath();
      case LcDslPackage.EXISTING_PATH: return createExistingPath();
      case LcDslPackage.ANY_PATH: return createAnyPath();
      case LcDslPackage.PLUGIN_WITH_VERSION_AND_START_LEVEL: return createPluginWithVersionAndStartLevel();
      case LcDslPackage.PLUGIN_WITH_VERSION: return createPluginWithVersion();
      case LcDslPackage.FEATURE_WITH_VERSION: return createFeatureWithVersion();
      case LcDslPackage.PROJECT: return createProject();
      case LcDslPackage.JAVA_MAIN_TYPE: return createJavaMainType();
      case LcDslPackage.CLEAR_OPTION: return createClearOption();
      case LcDslPackage.MEMORY_OPTION: return createMemoryOption();
      case LcDslPackage.GROUP_MEMBER: return createGroupMember();
      case LcDslPackage.GROUP_POST_LAUNCH_ACTION: return createGroupPostLaunchAction();
      case LcDslPackage.GROUP_POST_LAUNCH_DELAY: return createGroupPostLaunchDelay();
      case LcDslPackage.GROUP_POST_LAUNCH_REGEX: return createGroupPostLaunchRegex();
      case LcDslPackage.GROUP_POST_LAUNCH_WAIT: return createGroupPostLaunchWait();
      case LcDslPackage.STRING_WITH_VARIABLES: return createStringWithVariables();
      case LcDslPackage.TEST_CONFIG: return createTestConfig();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LcDslPackage.BROWSER_LAUNCH_MODE:
        return createBrowserLaunchModeFromString(eDataType, initialValue);
      case LcDslPackage.LAUNCH_CONFIG_TYPE:
        return createLaunchConfigTypeFromString(eDataType, initialValue);
      case LcDslPackage.LAUNCH_MODE_TYPE:
        return createLaunchModeTypeFromString(eDataType, initialValue);
      case LcDslPackage.MEMORY_UNIT:
        return createMemoryUnitFromString(eDataType, initialValue);
      case LcDslPackage.OUTPUT_STREAM:
        return createOutputStreamFromString(eDataType, initialValue);
      case LcDslPackage.INPUT_STREAM:
        return createInputStreamFromString(eDataType, initialValue);
      case LcDslPackage.TEST_RUNNER_TYPE:
        return createTestRunnerTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LcDslPackage.BROWSER_LAUNCH_MODE:
        return convertBrowserLaunchModeToString(eDataType, instanceValue);
      case LcDslPackage.LAUNCH_CONFIG_TYPE:
        return convertLaunchConfigTypeToString(eDataType, instanceValue);
      case LcDslPackage.LAUNCH_MODE_TYPE:
        return convertLaunchModeTypeToString(eDataType, instanceValue);
      case LcDslPackage.MEMORY_UNIT:
        return convertMemoryUnitToString(eDataType, instanceValue);
      case LcDslPackage.OUTPUT_STREAM:
        return convertOutputStreamToString(eDataType, instanceValue);
      case LcDslPackage.INPUT_STREAM:
        return convertInputStreamToString(eDataType, instanceValue);
      case LcDslPackage.TEST_RUNNER_TYPE:
        return convertTestRunnerTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LCModel createLCModel()
  {
    LCModelImpl lcModel = new LCModelImpl();
    return lcModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LaunchConfig createLaunchConfig()
  {
    LaunchConfigImpl launchConfig = new LaunchConfigImpl();
    return launchConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workspace createWorkspace()
  {
    WorkspaceImpl workspace = new WorkspaceImpl();
    return workspace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkingDir createWorkingDir()
  {
    WorkingDirImpl workingDir = new WorkingDirImpl();
    return workingDir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainProject createMainProject()
  {
    MainProjectImpl mainProject = new MainProjectImpl();
    return mainProject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainType createMainType()
  {
    MainTypeImpl mainType = new MainTypeImpl();
    return mainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddPlugin createAddPlugin()
  {
    AddPluginImpl addPlugin = new AddPluginImpl();
    return addPlugin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddFeature createAddFeature()
  {
    AddFeatureImpl addFeature = new AddFeatureImpl();
    return addFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContentProviderProduct createContentProviderProduct()
  {
    ContentProviderProductImpl contentProviderProduct = new ContentProviderProductImpl();
    return contentProviderProduct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IgnorePlugin createIgnorePlugin()
  {
    IgnorePluginImpl ignorePlugin = new IgnorePluginImpl();
    return ignorePlugin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VmArgument createVmArgument()
  {
    VmArgumentImpl vmArgument = new VmArgumentImpl();
    return vmArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProgramArgument createProgramArgument()
  {
    ProgramArgumentImpl programArgument = new ProgramArgumentImpl();
    return programArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentVariable createEnvironmentVariable()
  {
    EnvironmentVariableImpl environmentVariable = new EnvironmentVariableImpl();
    return environmentVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplicationExtPoint createApplicationExtPoint()
  {
    ApplicationExtPointImpl applicationExtPoint = new ApplicationExtPointImpl();
    return applicationExtPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProductExtPoint createProductExtPoint()
  {
    ProductExtPointImpl productExtPoint = new ProductExtPointImpl();
    return productExtPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Favorites createFavorites()
  {
    FavoritesImpl favorites = new FavoritesImpl();
    return favorites;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Redirect createRedirect()
  {
    RedirectImpl redirect = new RedirectImpl();
    return redirect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecutionEnvironment createExecutionEnvironment()
  {
    ExecutionEnvironmentImpl executionEnvironment = new ExecutionEnvironmentImpl();
    return executionEnvironment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigIniTemplate createConfigIniTemplate()
  {
    ConfigIniTemplateImpl configIniTemplate = new ConfigIniTemplateImpl();
    return configIniTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceEnablement createTraceEnablement()
  {
    TraceEnablementImpl traceEnablement = new TraceEnablementImpl();
    return traceEnablement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JavaMainSearch createJavaMainSearch()
  {
    JavaMainSearchImpl javaMainSearch = new JavaMainSearchImpl();
    return javaMainSearch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RapServletConfig createRapServletConfig()
  {
    RapServletConfigImpl rapServletConfig = new RapServletConfigImpl();
    return rapServletConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistingPath createExistingPath()
  {
    ExistingPathImpl existingPath = new ExistingPathImpl();
    return existingPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnyPath createAnyPath()
  {
    AnyPathImpl anyPath = new AnyPathImpl();
    return anyPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PluginWithVersionAndStartLevel createPluginWithVersionAndStartLevel()
  {
    PluginWithVersionAndStartLevelImpl pluginWithVersionAndStartLevel = new PluginWithVersionAndStartLevelImpl();
    return pluginWithVersionAndStartLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PluginWithVersion createPluginWithVersion()
  {
    PluginWithVersionImpl pluginWithVersion = new PluginWithVersionImpl();
    return pluginWithVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureWithVersion createFeatureWithVersion()
  {
    FeatureWithVersionImpl featureWithVersion = new FeatureWithVersionImpl();
    return featureWithVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Project createProject()
  {
    ProjectImpl project = new ProjectImpl();
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JavaMainType createJavaMainType()
  {
    JavaMainTypeImpl javaMainType = new JavaMainTypeImpl();
    return javaMainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClearOption createClearOption()
  {
    ClearOptionImpl clearOption = new ClearOptionImpl();
    return clearOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MemoryOption createMemoryOption()
  {
    MemoryOptionImpl memoryOption = new MemoryOptionImpl();
    return memoryOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupMember createGroupMember()
  {
    GroupMemberImpl groupMember = new GroupMemberImpl();
    return groupMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupPostLaunchAction createGroupPostLaunchAction()
  {
    GroupPostLaunchActionImpl groupPostLaunchAction = new GroupPostLaunchActionImpl();
    return groupPostLaunchAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupPostLaunchDelay createGroupPostLaunchDelay()
  {
    GroupPostLaunchDelayImpl groupPostLaunchDelay = new GroupPostLaunchDelayImpl();
    return groupPostLaunchDelay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupPostLaunchRegex createGroupPostLaunchRegex()
  {
    GroupPostLaunchRegexImpl groupPostLaunchRegex = new GroupPostLaunchRegexImpl();
    return groupPostLaunchRegex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupPostLaunchWait createGroupPostLaunchWait()
  {
    GroupPostLaunchWaitImpl groupPostLaunchWait = new GroupPostLaunchWaitImpl();
    return groupPostLaunchWait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringWithVariables createStringWithVariables()
  {
    StringWithVariablesImpl stringWithVariables = new StringWithVariablesImpl();
    return stringWithVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestConfig createTestConfig()
  {
    TestConfigImpl testConfig = new TestConfigImpl();
    return testConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserLaunchMode createBrowserLaunchModeFromString(EDataType eDataType, String initialValue)
  {
    BrowserLaunchMode result = BrowserLaunchMode.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBrowserLaunchModeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LaunchConfigType createLaunchConfigTypeFromString(EDataType eDataType, String initialValue)
  {
    LaunchConfigType result = LaunchConfigType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLaunchConfigTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LaunchModeType createLaunchModeTypeFromString(EDataType eDataType, String initialValue)
  {
    LaunchModeType result = LaunchModeType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLaunchModeTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryUnit createMemoryUnitFromString(EDataType eDataType, String initialValue)
  {
    MemoryUnit result = MemoryUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMemoryUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputStream createOutputStreamFromString(EDataType eDataType, String initialValue)
  {
    OutputStream result = OutputStream.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOutputStreamToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputStream createInputStreamFromString(EDataType eDataType, String initialValue)
  {
    InputStream result = InputStream.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertInputStreamToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestRunnerType createTestRunnerTypeFromString(EDataType eDataType, String initialValue)
  {
    TestRunnerType result = TestRunnerType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTestRunnerTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LcDslPackage getLcDslPackage()
  {
    return (LcDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LcDslPackage getPackage()
  {
    return LcDslPackage.eINSTANCE;
  }

} //LcDslFactoryImpl
